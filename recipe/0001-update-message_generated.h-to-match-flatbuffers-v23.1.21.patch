From 933519ce4709ae2274fd960aab9111a8768c13aa Mon Sep 17 00:00:00 2001
From: Deepali Chourasia <deepch23@in.ibm.com>
Date: Wed, 16 Aug 2023 05:36:04 +0000
Subject: [PATCH] update message_generated.h to match flatbuffers v23.1.21
 schema

updated generated files

add
---
 horovod/common/wire/message_generated.h       | 211 +++++++++---------
 .../tensorflow/custom_call_config_generated.h | 111 ++++-----
 2 files changed, 170 insertions(+), 152 deletions(-)

diff --git a/horovod/common/wire/message_generated.h b/horovod/common/wire/message_generated.h
index 33d46e2..28be44d 100644
--- a/horovod/common/wire/message_generated.h
+++ b/horovod/common/wire/message_generated.h
@@ -22,6 +22,13 @@
 
 #include "flatbuffers/flatbuffers.h"
 
+// Ensure the included flatbuffers.h is the same version as when this file was
+// generated, otherwise it may not be compatible.
+static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
+              FLATBUFFERS_VERSION_MINOR == 1 &&
+              FLATBUFFERS_VERSION_REVISION == 21,
+             "Non-compatible flatbuffers version included");
+
 namespace horovod {
 namespace common {
 namespace wire {
@@ -87,7 +94,7 @@ inline const char * const *EnumNamesDataType() {
 }
 
 inline const char *EnumNameDataType(DataType e) {
-  if (flatbuffers::IsOutRange(e, DataType_HOROVOD_UINT8, DataType_HOROVOD_BOOL)) return "";
+  if (::flatbuffers::IsOutRange(e, DataType_HOROVOD_UINT8, DataType_HOROVOD_BOOL)) return "";
   const size_t index = static_cast<size_t>(e);
   return EnumNamesDataType()[index];
 }
@@ -129,7 +136,7 @@ inline const char * const *EnumNamesReduceOp() {
 }
 
 inline const char *EnumNameReduceOp(ReduceOp e) {
-  if (flatbuffers::IsOutRange(e, ReduceOp_AVERAGE, ReduceOp_PRODUCT)) return "";
+  if (::flatbuffers::IsOutRange(e, ReduceOp_AVERAGE, ReduceOp_PRODUCT)) return "";
   const size_t index = static_cast<size_t>(e);
   return EnumNamesReduceOp()[index];
 }
@@ -177,7 +184,7 @@ inline const char * const *EnumNamesRequestType() {
 }
 
 inline const char *EnumNameRequestType(RequestType e) {
-  if (flatbuffers::IsOutRange(e, RequestType_ALLREDUCE, RequestType_REDUCESCATTER)) return "";
+  if (::flatbuffers::IsOutRange(e, RequestType_ALLREDUCE, RequestType_REDUCESCATTER)) return "";
   const size_t index = static_cast<size_t>(e);
   return EnumNamesRequestType()[index];
 }
@@ -228,12 +235,12 @@ inline const char * const *EnumNamesResponseType() {
 }
 
 inline const char *EnumNameResponseType(ResponseType e) {
-  if (flatbuffers::IsOutRange(e, ResponseType_ALLREDUCE, ResponseType_ERROR)) return "";
+  if (::flatbuffers::IsOutRange(e, ResponseType_ALLREDUCE, ResponseType_ERROR)) return "";
   const size_t index = static_cast<size_t>(e);
   return EnumNamesResponseType()[index];
 }
 
-struct Request FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct Request FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef RequestBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_REQUEST_RANK = 4,
@@ -256,8 +263,8 @@ struct Request FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   horovod::common::wire::DataType tensor_type() const {
     return static_cast<horovod::common::wire::DataType>(GetField<int8_t>(VT_TENSOR_TYPE, 0));
   }
-  const flatbuffers::String *tensor_name() const {
-    return GetPointer<const flatbuffers::String *>(VT_TENSOR_NAME);
+  const ::flatbuffers::String *tensor_name() const {
+    return GetPointer<const ::flatbuffers::String *>(VT_TENSOR_NAME);
   }
   int32_t root_rank() const {
     return GetField<int32_t>(VT_ROOT_RANK, 0);
@@ -265,8 +272,8 @@ struct Request FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   int32_t device() const {
     return GetField<int32_t>(VT_DEVICE, 0);
   }
-  const flatbuffers::Vector<int64_t> *tensor_shape() const {
-    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_TENSOR_SHAPE);
+  const ::flatbuffers::Vector<int64_t> *tensor_shape() const {
+    return GetPointer<const ::flatbuffers::Vector<int64_t> *>(VT_TENSOR_SHAPE);
   }
   double prescale_factor() const {
     return GetField<double>(VT_PRESCALE_FACTOR, 0.0);
@@ -277,28 +284,28 @@ struct Request FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   horovod::common::wire::ReduceOp reduce_op() const {
     return static_cast<horovod::common::wire::ReduceOp>(GetField<int8_t>(VT_REDUCE_OP, 0));
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
-           VerifyField<int32_t>(verifier, VT_REQUEST_RANK) &&
-           VerifyField<int8_t>(verifier, VT_REQUEST_TYPE) &&
-           VerifyField<int8_t>(verifier, VT_TENSOR_TYPE) &&
+           VerifyField<int32_t>(verifier, VT_REQUEST_RANK, 4) &&
+           VerifyField<int8_t>(verifier, VT_REQUEST_TYPE, 1) &&
+           VerifyField<int8_t>(verifier, VT_TENSOR_TYPE, 1) &&
            VerifyOffset(verifier, VT_TENSOR_NAME) &&
            verifier.VerifyString(tensor_name()) &&
-           VerifyField<int32_t>(verifier, VT_ROOT_RANK) &&
-           VerifyField<int32_t>(verifier, VT_DEVICE) &&
+           VerifyField<int32_t>(verifier, VT_ROOT_RANK, 4) &&
+           VerifyField<int32_t>(verifier, VT_DEVICE, 4) &&
            VerifyOffset(verifier, VT_TENSOR_SHAPE) &&
            verifier.VerifyVector(tensor_shape()) &&
-           VerifyField<double>(verifier, VT_PRESCALE_FACTOR) &&
-           VerifyField<double>(verifier, VT_POSTSCALE_FACTOR) &&
-           VerifyField<int8_t>(verifier, VT_REDUCE_OP) &&
+           VerifyField<double>(verifier, VT_PRESCALE_FACTOR, 8) &&
+           VerifyField<double>(verifier, VT_POSTSCALE_FACTOR, 8) &&
+           VerifyField<int8_t>(verifier, VT_REDUCE_OP, 1) &&
            verifier.EndTable();
   }
 };
 
 struct RequestBuilder {
   typedef Request Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_request_rank(int32_t request_rank) {
     fbb_.AddElement<int32_t>(Request::VT_REQUEST_RANK, request_rank, 0);
   }
@@ -308,7 +315,7 @@ struct RequestBuilder {
   void add_tensor_type(horovod::common::wire::DataType tensor_type) {
     fbb_.AddElement<int8_t>(Request::VT_TENSOR_TYPE, static_cast<int8_t>(tensor_type), 0);
   }
-  void add_tensor_name(flatbuffers::Offset<flatbuffers::String> tensor_name) {
+  void add_tensor_name(::flatbuffers::Offset<::flatbuffers::String> tensor_name) {
     fbb_.AddOffset(Request::VT_TENSOR_NAME, tensor_name);
   }
   void add_root_rank(int32_t root_rank) {
@@ -317,7 +324,7 @@ struct RequestBuilder {
   void add_device(int32_t device) {
     fbb_.AddElement<int32_t>(Request::VT_DEVICE, device, 0);
   }
-  void add_tensor_shape(flatbuffers::Offset<flatbuffers::Vector<int64_t>> tensor_shape) {
+  void add_tensor_shape(::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> tensor_shape) {
     fbb_.AddOffset(Request::VT_TENSOR_SHAPE, tensor_shape);
   }
   void add_prescale_factor(double prescale_factor) {
@@ -329,26 +336,26 @@ struct RequestBuilder {
   void add_reduce_op(horovod::common::wire::ReduceOp reduce_op) {
     fbb_.AddElement<int8_t>(Request::VT_REDUCE_OP, static_cast<int8_t>(reduce_op), 0);
   }
-  explicit RequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit RequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<Request> Finish() {
+  ::flatbuffers::Offset<Request> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<Request>(end);
+    auto o = ::flatbuffers::Offset<Request>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<Request> CreateRequest(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<Request> CreateRequest(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     int32_t request_rank = 0,
     horovod::common::wire::RequestType request_type = horovod::common::wire::RequestType_ALLREDUCE,
     horovod::common::wire::DataType tensor_type = horovod::common::wire::DataType_HOROVOD_UINT8,
-    flatbuffers::Offset<flatbuffers::String> tensor_name = 0,
+    ::flatbuffers::Offset<::flatbuffers::String> tensor_name = 0,
     int32_t root_rank = 0,
     int32_t device = 0,
-    flatbuffers::Offset<flatbuffers::Vector<int64_t>> tensor_shape = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> tensor_shape = 0,
     double prescale_factor = 0.0,
     double postscale_factor = 0.0,
     horovod::common::wire::ReduceOp reduce_op = horovod::common::wire::ReduceOp_AVERAGE) {
@@ -366,8 +373,8 @@ inline flatbuffers::Offset<Request> CreateRequest(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<Request> CreateRequestDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<Request> CreateRequestDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     int32_t request_rank = 0,
     horovod::common::wire::RequestType request_type = horovod::common::wire::RequestType_ALLREDUCE,
     horovod::common::wire::DataType tensor_type = horovod::common::wire::DataType_HOROVOD_UINT8,
@@ -394,52 +401,52 @@ inline flatbuffers::Offset<Request> CreateRequestDirect(
       reduce_op);
 }
 
-struct RequestList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct RequestList FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef RequestListBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_REQUESTS = 4,
     VT_SHUTDOWN = 6
   };
-  const flatbuffers::Vector<flatbuffers::Offset<horovod::common::wire::Request>> *requests() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<horovod::common::wire::Request>> *>(VT_REQUESTS);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<horovod::common::wire::Request>> *requests() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<horovod::common::wire::Request>> *>(VT_REQUESTS);
   }
   bool shutdown() const {
     return GetField<uint8_t>(VT_SHUTDOWN, 0) != 0;
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyOffset(verifier, VT_REQUESTS) &&
            verifier.VerifyVector(requests()) &&
            verifier.VerifyVectorOfTables(requests()) &&
-           VerifyField<uint8_t>(verifier, VT_SHUTDOWN) &&
+           VerifyField<uint8_t>(verifier, VT_SHUTDOWN, 1) &&
            verifier.EndTable();
   }
 };
 
 struct RequestListBuilder {
   typedef RequestList Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
-  void add_requests(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<horovod::common::wire::Request>>> requests) {
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
+  void add_requests(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<horovod::common::wire::Request>>> requests) {
     fbb_.AddOffset(RequestList::VT_REQUESTS, requests);
   }
   void add_shutdown(bool shutdown) {
     fbb_.AddElement<uint8_t>(RequestList::VT_SHUTDOWN, static_cast<uint8_t>(shutdown), 0);
   }
-  explicit RequestListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit RequestListBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<RequestList> Finish() {
+  ::flatbuffers::Offset<RequestList> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<RequestList>(end);
+    auto o = ::flatbuffers::Offset<RequestList>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<RequestList> CreateRequestList(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<horovod::common::wire::Request>>> requests = 0,
+inline ::flatbuffers::Offset<RequestList> CreateRequestList(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<horovod::common::wire::Request>>> requests = 0,
     bool shutdown = false) {
   RequestListBuilder builder_(_fbb);
   builder_.add_requests(requests);
@@ -447,18 +454,18 @@ inline flatbuffers::Offset<RequestList> CreateRequestList(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<RequestList> CreateRequestListDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    const std::vector<flatbuffers::Offset<horovod::common::wire::Request>> *requests = nullptr,
+inline ::flatbuffers::Offset<RequestList> CreateRequestListDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    const std::vector<::flatbuffers::Offset<horovod::common::wire::Request>> *requests = nullptr,
     bool shutdown = false) {
-  auto requests__ = requests ? _fbb.CreateVector<flatbuffers::Offset<horovod::common::wire::Request>>(*requests) : 0;
+  auto requests__ = requests ? _fbb.CreateVector<::flatbuffers::Offset<horovod::common::wire::Request>>(*requests) : 0;
   return horovod::common::wire::CreateRequestList(
       _fbb,
       requests__,
       shutdown);
 }
 
-struct Response FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct Response FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef ResponseBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_RESPONSE_TYPE = 4,
@@ -475,17 +482,17 @@ struct Response FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   horovod::common::wire::ResponseType response_type() const {
     return static_cast<horovod::common::wire::ResponseType>(GetField<int8_t>(VT_RESPONSE_TYPE, 0));
   }
-  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *tensor_names() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_TENSOR_NAMES);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tensor_names() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TENSOR_NAMES);
   }
-  const flatbuffers::String *error_message() const {
-    return GetPointer<const flatbuffers::String *>(VT_ERROR_MESSAGE);
+  const ::flatbuffers::String *error_message() const {
+    return GetPointer<const ::flatbuffers::String *>(VT_ERROR_MESSAGE);
   }
-  const flatbuffers::Vector<int32_t> *devices() const {
-    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_DEVICES);
+  const ::flatbuffers::Vector<int32_t> *devices() const {
+    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_DEVICES);
   }
-  const flatbuffers::Vector<int64_t> *tensor_sizes() const {
-    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_TENSOR_SIZES);
+  const ::flatbuffers::Vector<int64_t> *tensor_sizes() const {
+    return GetPointer<const ::flatbuffers::Vector<int64_t> *>(VT_TENSOR_SIZES);
   }
   horovod::common::wire::DataType tensor_type() const {
     return static_cast<horovod::common::wire::DataType>(GetField<int8_t>(VT_TENSOR_TYPE, 0));
@@ -502,9 +509,9 @@ struct Response FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   horovod::common::wire::ReduceOp reduce_op() const {
     return static_cast<horovod::common::wire::ReduceOp>(GetField<int8_t>(VT_REDUCE_OP, 0));
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
-           VerifyField<int8_t>(verifier, VT_RESPONSE_TYPE) &&
+           VerifyField<int8_t>(verifier, VT_RESPONSE_TYPE, 1) &&
            VerifyOffset(verifier, VT_TENSOR_NAMES) &&
            verifier.VerifyVector(tensor_names()) &&
            verifier.VerifyVectorOfStrings(tensor_names()) &&
@@ -514,32 +521,32 @@ struct Response FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
            verifier.VerifyVector(devices()) &&
            VerifyOffset(verifier, VT_TENSOR_SIZES) &&
            verifier.VerifyVector(tensor_sizes()) &&
-           VerifyField<int8_t>(verifier, VT_TENSOR_TYPE) &&
-           VerifyField<double>(verifier, VT_PRESCALE_FACTOR) &&
-           VerifyField<double>(verifier, VT_POSTSCALE_FACTOR) &&
-           VerifyField<int32_t>(verifier, VT_LAST_JOINED_RANK) &&
-           VerifyField<int8_t>(verifier, VT_REDUCE_OP) &&
+           VerifyField<int8_t>(verifier, VT_TENSOR_TYPE, 1) &&
+           VerifyField<double>(verifier, VT_PRESCALE_FACTOR, 8) &&
+           VerifyField<double>(verifier, VT_POSTSCALE_FACTOR, 8) &&
+           VerifyField<int32_t>(verifier, VT_LAST_JOINED_RANK, 4) &&
+           VerifyField<int8_t>(verifier, VT_REDUCE_OP, 1) &&
            verifier.EndTable();
   }
 };
 
 struct ResponseBuilder {
   typedef Response Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_response_type(horovod::common::wire::ResponseType response_type) {
     fbb_.AddElement<int8_t>(Response::VT_RESPONSE_TYPE, static_cast<int8_t>(response_type), 0);
   }
-  void add_tensor_names(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> tensor_names) {
+  void add_tensor_names(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tensor_names) {
     fbb_.AddOffset(Response::VT_TENSOR_NAMES, tensor_names);
   }
-  void add_error_message(flatbuffers::Offset<flatbuffers::String> error_message) {
+  void add_error_message(::flatbuffers::Offset<::flatbuffers::String> error_message) {
     fbb_.AddOffset(Response::VT_ERROR_MESSAGE, error_message);
   }
-  void add_devices(flatbuffers::Offset<flatbuffers::Vector<int32_t>> devices) {
+  void add_devices(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> devices) {
     fbb_.AddOffset(Response::VT_DEVICES, devices);
   }
-  void add_tensor_sizes(flatbuffers::Offset<flatbuffers::Vector<int64_t>> tensor_sizes) {
+  void add_tensor_sizes(::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> tensor_sizes) {
     fbb_.AddOffset(Response::VT_TENSOR_SIZES, tensor_sizes);
   }
   void add_tensor_type(horovod::common::wire::DataType tensor_type) {
@@ -557,24 +564,24 @@ struct ResponseBuilder {
   void add_reduce_op(horovod::common::wire::ReduceOp reduce_op) {
     fbb_.AddElement<int8_t>(Response::VT_REDUCE_OP, static_cast<int8_t>(reduce_op), 0);
   }
-  explicit ResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit ResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<Response> Finish() {
+  ::flatbuffers::Offset<Response> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<Response>(end);
+    auto o = ::flatbuffers::Offset<Response>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<Response> CreateResponse(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<Response> CreateResponse(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     horovod::common::wire::ResponseType response_type = horovod::common::wire::ResponseType_ALLREDUCE,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> tensor_names = 0,
-    flatbuffers::Offset<flatbuffers::String> error_message = 0,
-    flatbuffers::Offset<flatbuffers::Vector<int32_t>> devices = 0,
-    flatbuffers::Offset<flatbuffers::Vector<int64_t>> tensor_sizes = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tensor_names = 0,
+    ::flatbuffers::Offset<::flatbuffers::String> error_message = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> devices = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> tensor_sizes = 0,
     horovod::common::wire::DataType tensor_type = horovod::common::wire::DataType_HOROVOD_UINT8,
     double prescale_factor = 0.0,
     double postscale_factor = 0.0,
@@ -594,10 +601,10 @@ inline flatbuffers::Offset<Response> CreateResponse(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<Response> CreateResponseDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<Response> CreateResponseDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     horovod::common::wire::ResponseType response_type = horovod::common::wire::ResponseType_ALLREDUCE,
-    const std::vector<flatbuffers::Offset<flatbuffers::String>> *tensor_names = nullptr,
+    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tensor_names = nullptr,
     const char *error_message = nullptr,
     const std::vector<int32_t> *devices = nullptr,
     const std::vector<int64_t> *tensor_sizes = nullptr,
@@ -606,7 +613,7 @@ inline flatbuffers::Offset<Response> CreateResponseDirect(
     double postscale_factor = 0.0,
     int32_t last_joined_rank = 0,
     horovod::common::wire::ReduceOp reduce_op = horovod::common::wire::ReduceOp_AVERAGE) {
-  auto tensor_names__ = tensor_names ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*tensor_names) : 0;
+  auto tensor_names__ = tensor_names ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tensor_names) : 0;
   auto error_message__ = error_message ? _fbb.CreateString(error_message) : 0;
   auto devices__ = devices ? _fbb.CreateVector<int32_t>(*devices) : 0;
   auto tensor_sizes__ = tensor_sizes ? _fbb.CreateVector<int64_t>(*tensor_sizes) : 0;
@@ -624,52 +631,52 @@ inline flatbuffers::Offset<Response> CreateResponseDirect(
       reduce_op);
 }
 
-struct ResponseList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct ResponseList FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef ResponseListBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_RESPONSES = 4,
     VT_SHUTDOWN = 6
   };
-  const flatbuffers::Vector<flatbuffers::Offset<horovod::common::wire::Response>> *responses() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<horovod::common::wire::Response>> *>(VT_RESPONSES);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<horovod::common::wire::Response>> *responses() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<horovod::common::wire::Response>> *>(VT_RESPONSES);
   }
   bool shutdown() const {
     return GetField<uint8_t>(VT_SHUTDOWN, 0) != 0;
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyOffset(verifier, VT_RESPONSES) &&
            verifier.VerifyVector(responses()) &&
            verifier.VerifyVectorOfTables(responses()) &&
-           VerifyField<uint8_t>(verifier, VT_SHUTDOWN) &&
+           VerifyField<uint8_t>(verifier, VT_SHUTDOWN, 1) &&
            verifier.EndTable();
   }
 };
 
 struct ResponseListBuilder {
   typedef ResponseList Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
-  void add_responses(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<horovod::common::wire::Response>>> responses) {
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
+  void add_responses(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<horovod::common::wire::Response>>> responses) {
     fbb_.AddOffset(ResponseList::VT_RESPONSES, responses);
   }
   void add_shutdown(bool shutdown) {
     fbb_.AddElement<uint8_t>(ResponseList::VT_SHUTDOWN, static_cast<uint8_t>(shutdown), 0);
   }
-  explicit ResponseListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit ResponseListBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<ResponseList> Finish() {
+  ::flatbuffers::Offset<ResponseList> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<ResponseList>(end);
+    auto o = ::flatbuffers::Offset<ResponseList>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<ResponseList> CreateResponseList(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<horovod::common::wire::Response>>> responses = 0,
+inline ::flatbuffers::Offset<ResponseList> CreateResponseList(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<horovod::common::wire::Response>>> responses = 0,
     bool shutdown = false) {
   ResponseListBuilder builder_(_fbb);
   builder_.add_responses(responses);
@@ -677,11 +684,11 @@ inline flatbuffers::Offset<ResponseList> CreateResponseList(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<ResponseList> CreateResponseListDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    const std::vector<flatbuffers::Offset<horovod::common::wire::Response>> *responses = nullptr,
+inline ::flatbuffers::Offset<ResponseList> CreateResponseListDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    const std::vector<::flatbuffers::Offset<horovod::common::wire::Response>> *responses = nullptr,
     bool shutdown = false) {
-  auto responses__ = responses ? _fbb.CreateVector<flatbuffers::Offset<horovod::common::wire::Response>>(*responses) : 0;
+  auto responses__ = responses ? _fbb.CreateVector<::flatbuffers::Offset<horovod::common::wire::Response>>(*responses) : 0;
   return horovod::common::wire::CreateResponseList(
       _fbb,
       responses__,
diff --git a/horovod/tensorflow/custom_call_config_generated.h b/horovod/tensorflow/custom_call_config_generated.h
index 1406a2f..5b74987 100644
--- a/horovod/tensorflow/custom_call_config_generated.h
+++ b/horovod/tensorflow/custom_call_config_generated.h
@@ -6,6 +6,13 @@
 
 #include "flatbuffers/flatbuffers.h"
 
+// Ensure the included flatbuffers.h is the same version as when this file was
+// generated, otherwise it may not be compatible.
+static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
+              FLATBUFFERS_VERSION_MINOR == 1 &&
+              FLATBUFFERS_VERSION_REVISION == 21,
+             "Non-compatible flatbuffers version included");
+
 #include "../common/wire/message_generated.h"
 
 namespace horovod {
@@ -13,17 +20,20 @@ namespace xla {
 namespace wire {
 
 struct TensorShape;
+struct TensorShapeBuilder;
 
 struct CustomCallConfig;
+struct CustomCallConfigBuilder;
 
-struct TensorShape FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct TensorShape FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
+  typedef TensorShapeBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_DIMS = 4
   };
-  const flatbuffers::Vector<int64_t> *dims() const {
-    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_DIMS);
+  const ::flatbuffers::Vector<int64_t> *dims() const {
+    return GetPointer<const ::flatbuffers::Vector<int64_t> *>(VT_DIMS);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyOffset(verifier, VT_DIMS) &&
            verifier.VerifyVector(dims()) &&
@@ -32,33 +42,33 @@ struct TensorShape FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 };
 
 struct TensorShapeBuilder {
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
-  void add_dims(flatbuffers::Offset<flatbuffers::Vector<int64_t>> dims) {
+  typedef TensorShape Table;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
+  void add_dims(::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> dims) {
     fbb_.AddOffset(TensorShape::VT_DIMS, dims);
   }
-  explicit TensorShapeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit TensorShapeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  TensorShapeBuilder &operator=(const TensorShapeBuilder &);
-  flatbuffers::Offset<TensorShape> Finish() {
+  ::flatbuffers::Offset<TensorShape> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<TensorShape>(end);
+    auto o = ::flatbuffers::Offset<TensorShape>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<TensorShape> CreateTensorShape(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<flatbuffers::Vector<int64_t>> dims = 0) {
+inline ::flatbuffers::Offset<TensorShape> CreateTensorShape(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    ::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> dims = 0) {
   TensorShapeBuilder builder_(_fbb);
   builder_.add_dims(dims);
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<TensorShape> CreateTensorShapeDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<TensorShape> CreateTensorShapeDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     const std::vector<int64_t> *dims = nullptr) {
   auto dims__ = dims ? _fbb.CreateVector<int64_t>(*dims) : 0;
   return horovod::xla::wire::CreateTensorShape(
@@ -66,7 +76,8 @@ inline flatbuffers::Offset<TensorShape> CreateTensorShapeDirect(
       dims__);
 }
 
-struct CustomCallConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct CustomCallConfig FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
+  typedef CustomCallConfigBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_TENSOR_NAME = 4,
     VT_TENSOR_TYPE = 6,
@@ -78,17 +89,17 @@ struct CustomCallConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
     VT_REDUCE_OP = 18,
     VT_PROCESS_SET_ID = 20
   };
-  const flatbuffers::String *tensor_name() const {
-    return GetPointer<const flatbuffers::String *>(VT_TENSOR_NAME);
+  const ::flatbuffers::String *tensor_name() const {
+    return GetPointer<const ::flatbuffers::String *>(VT_TENSOR_NAME);
   }
   horovod::common::wire::DataType tensor_type() const {
     return static_cast<horovod::common::wire::DataType>(GetField<int8_t>(VT_TENSOR_TYPE, 0));
   }
-  const flatbuffers::Vector<flatbuffers::Offset<TensorShape>> *input_shapes() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<TensorShape>> *>(VT_INPUT_SHAPES);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<horovod::xla::wire::TensorShape>> *input_shapes() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<horovod::xla::wire::TensorShape>> *>(VT_INPUT_SHAPES);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<TensorShape>> *output_shapes() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<TensorShape>> *>(VT_OUTPUT_SHAPES);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<horovod::xla::wire::TensorShape>> *output_shapes() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<horovod::xla::wire::TensorShape>> *>(VT_OUTPUT_SHAPES);
   }
   float prescale_factor() const {
     return GetField<float>(VT_PRESCALE_FACTOR, 0.0f);
@@ -105,39 +116,40 @@ struct CustomCallConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   int32_t process_set_id() const {
     return GetField<int32_t>(VT_PROCESS_SET_ID, 0);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyOffset(verifier, VT_TENSOR_NAME) &&
            verifier.VerifyString(tensor_name()) &&
-           VerifyField<int8_t>(verifier, VT_TENSOR_TYPE) &&
+           VerifyField<int8_t>(verifier, VT_TENSOR_TYPE, 1) &&
            VerifyOffset(verifier, VT_INPUT_SHAPES) &&
            verifier.VerifyVector(input_shapes()) &&
            verifier.VerifyVectorOfTables(input_shapes()) &&
            VerifyOffset(verifier, VT_OUTPUT_SHAPES) &&
            verifier.VerifyVector(output_shapes()) &&
            verifier.VerifyVectorOfTables(output_shapes()) &&
-           VerifyField<float>(verifier, VT_PRESCALE_FACTOR) &&
-           VerifyField<float>(verifier, VT_POSTSCALE_FACTOR) &&
-           VerifyField<int32_t>(verifier, VT_ROOT_RANK) &&
-           VerifyField<int32_t>(verifier, VT_REDUCE_OP) &&
-           VerifyField<int32_t>(verifier, VT_PROCESS_SET_ID) &&
+           VerifyField<float>(verifier, VT_PRESCALE_FACTOR, 4) &&
+           VerifyField<float>(verifier, VT_POSTSCALE_FACTOR, 4) &&
+           VerifyField<int32_t>(verifier, VT_ROOT_RANK, 4) &&
+           VerifyField<int32_t>(verifier, VT_REDUCE_OP, 4) &&
+           VerifyField<int32_t>(verifier, VT_PROCESS_SET_ID, 4) &&
            verifier.EndTable();
   }
 };
 
 struct CustomCallConfigBuilder {
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
-  void add_tensor_name(flatbuffers::Offset<flatbuffers::String> tensor_name) {
+  typedef CustomCallConfig Table;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
+  void add_tensor_name(::flatbuffers::Offset<::flatbuffers::String> tensor_name) {
     fbb_.AddOffset(CustomCallConfig::VT_TENSOR_NAME, tensor_name);
   }
   void add_tensor_type(horovod::common::wire::DataType tensor_type) {
     fbb_.AddElement<int8_t>(CustomCallConfig::VT_TENSOR_TYPE, static_cast<int8_t>(tensor_type), 0);
   }
-  void add_input_shapes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TensorShape>>> input_shapes) {
+  void add_input_shapes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<horovod::xla::wire::TensorShape>>> input_shapes) {
     fbb_.AddOffset(CustomCallConfig::VT_INPUT_SHAPES, input_shapes);
   }
-  void add_output_shapes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TensorShape>>> output_shapes) {
+  void add_output_shapes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<horovod::xla::wire::TensorShape>>> output_shapes) {
     fbb_.AddOffset(CustomCallConfig::VT_OUTPUT_SHAPES, output_shapes);
   }
   void add_prescale_factor(float prescale_factor) {
@@ -155,24 +167,23 @@ struct CustomCallConfigBuilder {
   void add_process_set_id(int32_t process_set_id) {
     fbb_.AddElement<int32_t>(CustomCallConfig::VT_PROCESS_SET_ID, process_set_id, 0);
   }
-  explicit CustomCallConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit CustomCallConfigBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  CustomCallConfigBuilder &operator=(const CustomCallConfigBuilder &);
-  flatbuffers::Offset<CustomCallConfig> Finish() {
+  ::flatbuffers::Offset<CustomCallConfig> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<CustomCallConfig>(end);
+    auto o = ::flatbuffers::Offset<CustomCallConfig>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<CustomCallConfig> CreateCustomCallConfig(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<flatbuffers::String> tensor_name = 0,
+inline ::flatbuffers::Offset<CustomCallConfig> CreateCustomCallConfig(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    ::flatbuffers::Offset<::flatbuffers::String> tensor_name = 0,
     horovod::common::wire::DataType tensor_type = horovod::common::wire::DataType_HOROVOD_UINT8,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TensorShape>>> input_shapes = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TensorShape>>> output_shapes = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<horovod::xla::wire::TensorShape>>> input_shapes = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<horovod::xla::wire::TensorShape>>> output_shapes = 0,
     float prescale_factor = 0.0f,
     float postscale_factor = 0.0f,
     int32_t root_rank = 0,
@@ -191,20 +202,20 @@ inline flatbuffers::Offset<CustomCallConfig> CreateCustomCallConfig(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<CustomCallConfig> CreateCustomCallConfigDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<CustomCallConfig> CreateCustomCallConfigDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     const char *tensor_name = nullptr,
     horovod::common::wire::DataType tensor_type = horovod::common::wire::DataType_HOROVOD_UINT8,
-    const std::vector<flatbuffers::Offset<TensorShape>> *input_shapes = nullptr,
-    const std::vector<flatbuffers::Offset<TensorShape>> *output_shapes = nullptr,
+    const std::vector<::flatbuffers::Offset<horovod::xla::wire::TensorShape>> *input_shapes = nullptr,
+    const std::vector<::flatbuffers::Offset<horovod::xla::wire::TensorShape>> *output_shapes = nullptr,
     float prescale_factor = 0.0f,
     float postscale_factor = 0.0f,
     int32_t root_rank = 0,
     int32_t reduce_op = 0,
     int32_t process_set_id = 0) {
   auto tensor_name__ = tensor_name ? _fbb.CreateString(tensor_name) : 0;
-  auto input_shapes__ = input_shapes ? _fbb.CreateVector<flatbuffers::Offset<TensorShape>>(*input_shapes) : 0;
-  auto output_shapes__ = output_shapes ? _fbb.CreateVector<flatbuffers::Offset<TensorShape>>(*output_shapes) : 0;
+  auto input_shapes__ = input_shapes ? _fbb.CreateVector<::flatbuffers::Offset<horovod::xla::wire::TensorShape>>(*input_shapes) : 0;
+  auto output_shapes__ = output_shapes ? _fbb.CreateVector<::flatbuffers::Offset<horovod::xla::wire::TensorShape>>(*output_shapes) : 0;
   return horovod::xla::wire::CreateCustomCallConfig(
       _fbb,
       tensor_name__,
-- 
2.40.1

